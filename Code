
from ast import Try
from pickle import NONE, TRUE
import pygame
import random
import math
pygame.init()

class DrawInformation:
    BLACK = 0,0,0                             # these are the RGB values 
    WHITE = 255,255,255
    GREEN = 0,255,0                               # defining all these variable in a class so that we can acess them from any function
    RED = 255,0,0
    PINK = 243,207,198
    
    # GRADIENTS = [(128,128,128),
    #              (160,160,160),   # gray, light gray , dark grey
    #              (192,192,192)]
    GRADIENTS = [(51,51,255),(0,0,255),(0,0,102)]

    BACKGROUND_COLOR = PINK
    FONT = pygame.font.SysFont('comicsans',20)
    LARGE_FONT= pygame.font.SysFont('comicsans',30)
    SIDE_PAD = 100
    TOP_PAD = 150
 
    def __init__(self,width,height,lst):                   # constructor 
        self.width=width                                    # self = this
        self.height=height

        self.window = pygame.display.set_mode((width,height))              # to make the window 
        pygame.display.set_caption("SORTING VISULIZATION")                # to set the caption

        self.set_list(lst)                               # calling set_list function 
    
    def set_list(self,lst):
        self.lst=lst
        self.min_value = min(lst)
        self.max_value = max(lst)

        self.block_width = round((self.width - self.SIDE_PAD) / len(lst))
        self.block_height = math.floor((self.height - self.TOP_PAD) / (self.max_value - self.min_value))  # calculating value of 1 unit  later we will multiply this by value of list element to get its height
        
        self.start_x = self.SIDE_PAD // 2


def draw(draw_info,algo_name,ascending):
    draw_info.window.fill(draw_info.BACKGROUND_COLOR)    # function to set the background color of our window
    
    title = draw_info.LARGE_FONT.render(f"{algo_name} - {'Ascending' if ascending else 'Descending'}", 1, draw_info.BLACK)
    draw_info.window.blit(title, (draw_info.width/2 - title.get_width()/2 , 5))

    controls = draw_info.FONT.render('R - RESET | SPACE - SORTING | A - ASCENDING | D - DESCENDING',1,draw_info.BLACK)  # 1 is sharpness of the line 
    draw_info.window.blit(controls,(draw_info.width/2 - controls.get_width()/2 , 45))
    
    sorting = draw_info.FONT.render('I - INSERTION SORT | B - BUBBBLE SORT',1,draw_info.BLACK)  # 1 is sharpness of the line 
    draw_info.window.blit(sorting,(draw_info.width/2 - sorting.get_width()/2 , 75))
    
    draw_list(draw_info)
    pygame.display.update()

def draw_list(draw_info , color_positions = {}, clear_bg=False):
    lst= draw_info.lst
    if clear_bg:
        clear_rect = (draw_info.SIDE_PAD//2 , draw_info.TOP_PAD , draw_info.width - draw_info.SIDE_PAD,
                                                                                           draw_info.height-draw_info.TOP_PAD)
        pygame.draw.rect(draw_info.window , draw_info.BACKGROUND_COLOR , clear_rect)                                                                                   
    for i,val in enumerate(lst):
        x = draw_info.start_x + i * draw_info.block_width
        y = draw_info.height - (val-draw_info.min_value) * draw_info.block_height

        color = draw_info.GRADIENTS[i % 3]

        if i in color_positions:               # giving color to those two bars who are swapping 
            color = color_positions[i]

        pygame.draw.rect(draw_info.window , color , (x , y , draw_info.block_width , draw_info.height))
        
    if clear_bg:
         pygame.display.update()

def genrating_random_list(n,min_value,max_value):
    lst = []
    for _ in range (n):                         # generating the random list or array 
        val = random.randint(min_value+1,max_value)     # this will generate no. between this range both inclusive 
        lst.append(val)
    return lst


def bubble_sort(draw_info,ascending=True):
    lst = draw_info.lst
    for i in range (len(lst) - 1):
        for j in range (len(lst) -1 -i):
            num1 = lst[j]
            num2 = lst[j+1]

            if((num1>num2 and ascending) or (num1<num2 and not ascending)):
                lst[j] , lst[j+1] = lst[j+1] , lst[j]
                draw_list(draw_info , {j: draw_info.GREEN , j+1: draw_info.RED},True)
                yield True
    return lst

def insertion_sort(draw_info, ascending=True):
	lst = draw_info.lst

	for i in range(1, len(lst)):
		current = lst[i]

		while True:
			ascending_sort = i > 0 and lst[i - 1] > current and ascending
			descending_sort = i > 0 and lst[i - 1] < current and not ascending

			if not ascending_sort and not descending_sort:
				break

			lst[i] = lst[i - 1]
			i = i - 1
			lst[i] = current
			draw_list(draw_info, {i - 1: draw_info.GREEN, i: draw_info.RED}, True)
			yield True

	return lst

def main():
    n = 40
    min_value = 0
    max_value = 100
    lst = genrating_random_list(n,min_value,max_value)
    draw_info = DrawInformation(1300,700,lst)  

    sorting=False
    ascending = True
    sorting_algorithm = bubble_sort
    sorting_algo_name = "Bubble Sort"
    sorting_algorithm_generator = None


    run = True
    clock = pygame.time.Clock()
    while run:
        clock.tick(5)                              # just like FPS  means how many times this loop run in a sec
        if sorting:
            try:
                 next(sorting_algorithm_generator)
            except StopIteration:
                 sorting = False     
        else: 
            draw(draw_info,sorting_algo_name,ascending) 

        for event in pygame.event.get():
            if(event.type == pygame.QUIT):
                run = False;
            if(event.type != pygame.KEYDOWN):
                continue
            if(event.key == pygame.K_r):
                lst=genrating_random_list(n,min_value,max_value) 
                draw_info.set_list(lst)  
                sorting = False 
            elif(event.key == pygame.K_SPACE and sorting==False):
                sorting=True  
                sorting_algorithm_generator = sorting_algorithm(draw_info,ascending)
            elif(event.key == pygame.K_a and not sorting):
                ascending = True
            elif(event.key == pygame.K_d and not sorting):
                ascending = False
            elif(event.key == pygame.K_i and not sorting ):
                sorting_algorithm = insertion_sort
                sorting_algo_name = "Insertion Sort"
            elif(event.key == pygame.K_b and not sorting ):
                sorting_algorithm = bubble_sort
                sorting_algo_name = "Bubble Sort"     
    pygame.quit()


main()                  
